@import url(https://fonts.googleapis.com/css?family=Droid+Serif:400,700|Open+Sans:300,400,700);

/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

* {
  box-sizing: border-box;
}

body {
  font-family: 'Droid Serif', Helvetica, Arial, sans-serif;
  font-weight: 400;
  font-size: 1rem;
  line-height: 1;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: 'Open Sans', Helvetica, Arial, sans-serif;
  font-weight: 700;
  margin-bottom: 2rem;
}

h1 {
  margin-bottom: 6rem;
}

h6 {
  font-size: 1.1rem;
}

@media (min-width: 480px) and (max-width: 768px) {
  h6 {
    font-size: calc( 1.1rem + 0.05 * ( ( 100vw - 480px) / 288 ));
  }
}

@media (min-width: 768px) and (max-width: 992px) {
  h6 {
    font-size: calc( 1.15rem + 0.05 * ( ( 100vw - 768px) / 224 ));
  }
}

@media (min-width: 992px) and (max-width: 1200px) {
  h6 {
    font-size: calc( 1.2rem + 0.05 * ( ( 100vw - 992px) / 208 ));
  }
}

@media (min-width: 1200px) {
  h6 {
    font-size: 1.25rem;
  }
}

h5 {
  font-size: 1.21rem;
}

@media (min-width: 480px) and (max-width: 768px) {
  h5 {
    font-size: calc( 1.21rem + 0.1125 * ( ( 100vw - 480px) / 288 ));
  }
}

@media (min-width: 768px) and (max-width: 992px) {
  h5 {
    font-size: calc( 1.3225rem + 0.1175 * ( ( 100vw - 768px) / 224 ));
  }
}

@media (min-width: 992px) and (max-width: 1200px) {
  h5 {
    font-size: calc( 1.44rem + 0.1225 * ( ( 100vw - 992px) / 208 ));
  }
}

@media (min-width: 1200px) {
  h5 {
    font-size: 1.5625rem;
  }
}

h4 {
  font-size: 1.331rem;
}

@media (min-width: 480px) and (max-width: 768px) {
  h4 {
    font-size: calc( 1.331rem + 0.189875 * ( ( 100vw - 480px) / 288 ));
  }
}

@media (min-width: 768px) and (max-width: 992px) {
  h4 {
    font-size: calc( 1.520875rem + 0.207125 * ( ( 100vw - 768px) / 224 ));
  }
}

@media (min-width: 992px) and (max-width: 1200px) {
  h4 {
    font-size: calc( 1.728rem + 0.225125 * ( ( 100vw - 992px) / 208 ));
  }
}

@media (min-width: 1200px) {
  h4 {
    font-size: 1.953125rem;
  }
}

h3 {
  font-size: 1.4641rem;
}

@media (min-width: 480px) and (max-width: 768px) {
  h3 {
    font-size: calc( 1.4641rem + 0.28490625 * ( ( 100vw - 480px) / 288 ));
  }
}

@media (min-width: 768px) and (max-width: 992px) {
  h3 {
    font-size: calc( 1.74900625rem + 0.32459375 * ( ( 100vw - 768px) / 224 ));
  }
}

@media (min-width: 992px) and (max-width: 1200px) {
  h3 {
    font-size: calc( 2.0736rem + 0.36780625 * ( ( 100vw - 992px) / 208 ));
  }
}

@media (min-width: 1200px) {
  h3 {
    font-size: 2.44140625rem;
  }
}

h2 {
  font-size: 1.61051rem;
}

@media (min-width: 480px) and (max-width: 768px) {
  h2 {
    font-size: calc( 1.61051rem + 0.40084719 * ( ( 100vw - 480px) / 288 ));
  }
}

@media (min-width: 768px) and (max-width: 992px) {
  h2 {
    font-size: calc( 2.01135719rem + 0.47696281 * ( ( 100vw - 768px) / 224 ));
  }
}

@media (min-width: 992px) and (max-width: 1200px) {
  h2 {
    font-size: calc( 2.48832rem + 0.56343781 * ( ( 100vw - 992px) / 208 ));
  }
}

@media (min-width: 1200px) {
  h2 {
    font-size: 3.05175781rem;
  }
}

h1 {
  font-size: 1.771561rem;
}

@media (min-width: 480px) and (max-width: 768px) {
  h1 {
    font-size: calc( 1.771561rem + 0.54149977 * ( ( 100vw - 480px) / 288 ));
  }
}

@media (min-width: 768px) and (max-width: 992px) {
  h1 {
    font-size: calc( 2.31306077rem + 0.67292323 * ( ( 100vw - 768px) / 224 ));
  }
}

@media (min-width: 992px) and (max-width: 1200px) {
  h1 {
    font-size: calc( 2.985984rem + 0.82871327 * ( ( 100vw - 992px) / 208 ));
  }
}

@media (min-width: 1200px) {
  h1 {
    font-size: 3.81469727rem;
  }
}

p {
  color: rgba(0, 0, 0, 0.8);
  font-size: 1.2rem;
  margin-bottom: 2.5rem;
  line-height: 2;
}

strong {
  font-weight: 700;
}

em {
  font-style: italic;
}

img {
  max-width: 100%;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */